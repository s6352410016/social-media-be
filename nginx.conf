user nginx; #กำหนดให้ NGINX ทำงานภายใต้ผู้ใช้งาน nginx
worker_processes auto; #ให้จำนวน worker processes (กระบวนการที่ NGINX ใช้ในการประมวลผล) ถูกกำหนดอัตโนมัติตามจำนวน CPU ของระบบ
error_log /var/log/nginx/error.log warn; #ระบุไฟล์สำหรับบันทึกข้อผิดพลาด (error.log) และระดับของการบันทึก (warn)
pid /var/run/nginx.pid; #ไฟล์ PID (Process ID) ของ NGINX จะถูกสร้างในตำแหน่ง /var/run/nginx.pid

events {
  worker_connections 1024; #กำหนดจำนวนการเชื่อมต่อสูงสุดที่ worker process แต่ละตัวสามารถรองรับได้ (เช่น 1024 การเชื่อมต่อพร้อมกันต่อ worker process)
}

http {
  include /etc/nginx/mime.types; #ระบุไฟล์ที่กำหนดประเภท MIME (Multipurpose Internet Mail Extensions) เช่น .html, .css, .js ฯลฯ
  default_type application/octet-stream; #กำหนดประเภท MIME เป็นค่าเริ่มต้น หากไม่สามารถระบุประเภทไฟล์ได้

  log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"'; #กำหนดรูปแบบของการบันทึก log สำหรับการเข้าถึง (access log) โดยแสดงข้อมูล เช่น: $remote_addr: ที่อยู่ IP ของผู้ร้องขอ $time_local: วันที่และเวลาของคำร้อง $request: รายละเอียดของ HTTP request $status: สถานะ HTTP (เช่น 200, 404, 500) $body_bytes_sent: ขนาดข้อมูลที่ส่งกลับ $http_user_agent: ข้อมูล User-Agent ของผู้ร้องขอ

  access_log  /var/log/nginx/access.log  main; #ระบุไฟล์สำหรับบันทึก access log (access.log) และใช้รูปแบบที่ตั้งไว้ใน log_format main

  sendfile        on; #เปิดใช้งานฟังก์ชัน sendfile เพื่อให้ NGINX สามารถส่งไฟล์ (เช่น ไฟล์ HTML, CSS, JavaScript, รูปภาพ ฯลฯ) ไปยังไคลเอนต์ได้อย่างมีประสิทธิภาพโดยใช้ ระบบปฏิบัติการ (kernel) แทนการอ่านไฟล์เข้าไปใน memory ของ NGINX ก่อนส่ง
  keepalive_timeout  65; #กำหนดระยะเวลาที่เซิร์ฟเวอร์จะ เก็บการเชื่อมต่อที่ยังไม่ได้ใช้งาน (idle connection) ไว้ก่อนที่จะตัดการเชื่อมต่อ ค่า 65 หมายถึง 65 วินาที ที่เซิร์ฟเวอร์จะรอคำร้องขอ (request) ใหม่จากไคลเอนต์ก่อนปิดการเชื่อมต่อ

  server {
    listen       80; #เซิร์ฟเวอร์นี้จะรับคำร้องขอบนพอร์ต 80 (HTTP)
    server_name  _; #ระบุชื่อโดเมนที่เซิร์ฟเวอร์นี้จะให้บริการ หากตรงกับคำร้องขอที่เข้ามา

    location / {
      proxy_pass http://nodejs:5000; #คำร้องขอที่มาถึง NGINX จะถูกส่งต่อไปยัง backend (container) บนพอร์ต 5000
      proxy_set_header Host $host; #ส่งค่า hostname ของคำร้องขอเดิมไปยัง backend
      proxy_set_header X-Real-IP $remote_addr; #ส่งที่อยู่ IP จริงของผู้ร้องขอไปยัง backend
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; #ส่งรายการที่อยู่ IP ที่ผ่านมาของคำร้องขอไปยัง backend
      proxy_set_header X-Forwarded-Proto $scheme; #ส่งโปรโตคอล (HTTP หรือ HTTPS) ของคำร้องขอเดิมไปยัง backend
    }
  }
}